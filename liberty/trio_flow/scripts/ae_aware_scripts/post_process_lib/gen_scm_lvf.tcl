###############################################################################
#  DISCLAIMER: The following code is provided for Cadence customers to use at  #
#   their own risk. The code may require modification to satisfy the           #
#   requirements of any user. The code and any modifications to the code may   #
#   not be compatible with current or future versions of Cadence products.     #
#   THE CODE IS PROVIDED "AS IS" AND WITH NO WARRANTIES, INCLUDING WITHOUT     #
#   LIMITATION ANY EXPRESS WARRANTIES OR IMPLIED WARRANTIES OF MERCHANTABILITY #
#   OR FITNESS FOR A PARTICULAR USE.                                           #
################################################################################


puts "##################"
puts "Standalone_Command: [string tolower $::LIBERATE_program] [file normalize [info script]] $argv"
puts "##################"

# used to remove quotes from is_propagating : "true"
rename write_lib_attr_value orig_write_lib_attr_value
proc write_lib_attr_value {
  {indent -string }
  {attr_name -string }
  {attr_value -string }
  {type -string }
  {file }
  } {
  if {$attr_value == "\"true\""} {
    set attr_value "true"
  } elseif {$attr_value == "\"false\""} {
    set attr_value "false"
  }
  orig_write_lib_attr_value $indent $attr_name $attr_value $type $file
}

set ocvpath [lindex $argv 0]
set type    [lindex $argv 1]
set scm_lvf [lindex $argv 2]

set ocvlib ${ocvpath}.lib              ; # type=lib - this lib is generated by Variety and has nom (nldm-only) + lvf (used as sense file)
regsub "LVF" $ocvpath "NOM" nompath    ; # non-UF flow: dir path for nom libs are expected to be same except LVF replaced with NOM
set nomlib ${nompath}.${type}          ; # type=<>_nomOnly - nom lib used to read on read_library for generating NOM+LVF and NOM+SCM views (used as nom lib)
set outlib ${ocvpath}.${type}_$scm_lvf ; # output lib written under *LVF* output dir

puts "INFO:PP ([info script]) : nomlib=$nomlib"
puts "INFO:PP ([info script]) : ocvlib=$ocvlib"

set missing 0
foreach tl [list $ocvlib $nomlib] {if {![file exists $tl]} {incr missing; continue}}
if {$missing != 0} {puts "ERROR-MISSING-PP (gen_scm_lvf) : SCM lib cannot generated as nom or ocv libs are missing -- $nomlib  ----- $ocvlib" ; return}

read_library $nomlib

#expand_bundles
set_var pin_type_order {internals inouts inputs outputs}
# remove the cell lekage attribute
set_var leakage_cell_attribute 0
# pervent resetting of negative power
set_var reset_negative_power 0
  
set_var variation_mean_nominal_model_mode 1
set_var variation_mean_nominal_model_skewness 1

# to prevent old ccsn data missing
set_var ccsn_allow_duplicate_condition	1
set_var ccsn_allow_multi_switching_unate_groups  1
set_var ccsn_allow_partial_voltage_swing  0
set_var ccsn_extra_default_stages  0
set_var ccsn_print_is_needed_if_false_attr_value  1

if {$scm_lvf == "scm"} {
   add_margin -sigma_factor 3 -sensitivity_file $ocvlib -type { hold non_seq_hold removal }
   if {[regexp "lib_ecsm_ccs" $type]} {
      write_library -ecsm_ccs -unique_pin_data -overwrite -capacitance_range  0 -precision "%0.4g" -driver_waveform -driver_waveform_size 45 -filename ${outlib} scm
   } else {
      write_library -unique_pin_data -overwrite -capacitance_range  0 -precision "%0.4g" -driver_waveform -driver_waveform_size 45 -filename ${outlib} scm
   }
} else {
   if {[regexp "lib_ecsm_ccs" $type]} {
      write_library -ecsm_ccs -unique_pin_data -overwrite -sensitivity_file $ocvlib -capacitance_range  0 -precision "%0.4g" -driver_waveform -driver_waveform_size 45 -filename ${outlib} scm
   } else {
      write_library -unique_pin_data -overwrite -sensitivity_file $ocvlib -capacitance_range  0 -precision "%0.4g" -driver_waveform -driver_waveform_size 45 -filename ${outlib} scm
   }
}


